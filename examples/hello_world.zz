#!/usr/bin/env python################################## Simple Python speed test ################################### Author: Dennis Bakhuis        ## Date: 2022-09-02              ## License: MIT                  ##################################import randomimport timedef estimate_pi(n_points: int, show_estimate: bool):    """    Simple Monte Carlo Pi estimation calculation.    Parameters    ----------    n_points        number of random numbers used to for estimation.    show_estimate        if True, will show the estimation of Pi, otherwise        will not output anything.    """    var within_circle: int = 0    var x: float    var y: float    var radius_squared: float    for _ in range(n_points):        x = random.uniform(-1, 1)        y = random.uniform(-1, 1)        radius_squared = x**2 + y**2        if radius_squared <= 1:            within_circle += 1    var pi_estimate: float = (4 * within_circle) / (n_points as float)    if not show_estimate:        print("Final Estimation of Pi=" + str(pi_estimate))def run_test(n_points: int, n_repeats: int, only_time: bool):    """    Perform the tests and measure required time.    Parameters    ----------    n_points        number of random numbers used to for estimation.    n_repeats        number of times the test is repeated.    only_time        if True will only print the time, otherwise        will also show the Pi estimate and a neat formatted        time.    """    var start_time = time.time()    for i in range(n_repeats):        estimate_pi(n_points, only_time)    var elapsed_time: float = (time.time() - start_time) / (n_repeats as float)    if only_time:        print(elapsed_time)    else:        print("Estimating pi took " + str(elapsed_time) + " seconds per run.")def main():    run_test(1000000, 100, True)